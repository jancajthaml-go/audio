package format.mp3;
import java.util.Arrays;


public class PolyphaseFilter {
	
	private final float[] V = new float[1024];
	private int VBase = 0;
	
	private final float[] output;

	// D is multiplied by 32768
	private static final float[] D1 = {
	     0.0f,     -0.5f,     -0.5f,     -0.5f,     -0.5f,     -0.5f,
	    -0.5f,     -1.0f,     -1.0f,     -1.0f,     -1.0f,     -1.5f,
	    -1.5f,     -2.0f,     -2.0f,     -2.5f,     -2.5f,     -3.0f,
	    -3.5f,     -3.5f,     -4.0f,     -4.5f,     -5.0f,     -5.5f,
	    -6.5f,     -7.0f,     -8.0f,     -8.5f,     -9.5f,    -10.5f,
	   -12.0f,    -13.0f,    -14.5f,    -15.5f,    -17.5f,    -19.0f,
	   -20.5f,    -22.5f,    -24.5f,    -26.5f,    -29.0f,    -31.5f,
	   -34.0f,    -36.5f,    -39.5f,    -42.5f,    -45.5f,    -48.5f,
	   -52.0f,    -55.5f,    -58.5f,    -62.5f,    -66.0f,    -69.5f,
	   -73.5f,    -77.0f,    -80.5f,    -84.5f,    -88.0f,    -91.5f,
	   -95.0f,    -98.0f,   -101.0f,   -104.0f,    106.5f,    109.0f,
	   111.0f,    112.5f,    113.5f,    114.0f,    114.0f,    113.5f,
	   112.0f,    110.5f,    107.5f,    104.0f,    100.0f,     94.5f,
	    88.5f,     81.5f,     73.0f,     63.5f,     53.0f,     41.5f,
	    28.5f,     14.5f,     -1.0f,    -18.0f,    -36.0f,    -55.5f,
	   -76.5f,    -98.5f,   -122.0f,   -147.0f,   -173.5f,   -200.5f,
	  -229.5f,   -259.5f,   -290.5f,   -322.5f,   -355.5f,   -389.5f,
	  -424.0f,   -459.5f,   -495.5f,   -532.0f,   -568.5f,   -605.0f,
	  -641.5f,   -678.0f,   -714.0f,   -749.0f,   -783.5f,   -817.0f,
	  -849.0f,   -879.5f,   -908.5f,   -935.0f,   -959.5f,   -981.0f,
	 -1000.5f,  -1016.0f,  -1028.5f,  -1037.5f,  -1042.5f,  -1043.5f,
	 -1040.0f,  -1031.5f,   1018.5f,   1000.0f,    976.0f,    946.5f,
	   911.0f,    869.5f,    822.0f,    767.5f,    707.0f,    640.0f,
	   565.5f,    485.0f,    397.0f,    302.5f,    201.0f,     92.5f,
	   -22.5f,   -144.0f,   -272.5f,   -407.0f,   -547.5f,   -694.0f,
	  -846.0f,  -1003.0f,  -1165.0f,  -1331.5f,  -1502.0f,  -1675.5f,
	 -1852.5f,  -2031.5f,  -2212.5f,  -2394.0f,  -2576.5f,  -2758.5f,
	 -2939.5f,  -3118.5f,  -3294.5f,  -3467.5f,  -3635.5f,  -3798.5f,
	 -3955.0f,  -4104.5f,  -4245.5f,  -4377.5f,  -4499.0f,  -4609.5f,
	 -4708.0f,  -4792.5f,  -4863.5f,  -4919.0f,  -4958.0f,  -4979.5f,
	 -4983.0f,  -4967.5f,  -4931.5f,  -4875.0f,  -4796.0f,  -4694.5f,
	 -4569.5f,  -4420.0f,  -4246.0f,  -4046.0f,  -3820.0f,  -3567.0f,
	  3287.0f,   2979.5f,   2644.0f,   2280.5f,   1888.0f,   1467.5f,
	  1018.5f,    541.0f,     35.0f,   -499.0f,  -1061.0f,  -1650.0f,
	 -2266.5f,  -2909.0f,  -3577.0f,  -4270.0f,  -4987.5f,  -5727.5f,
	 -6490.0f,  -7274.0f,  -8077.5f,  -8899.5f,  -9739.0f, -10594.5f,
	-11464.5f, -12347.0f, -13241.0f, -14144.5f, -15056.0f, -15973.5f,
	-16895.5f, -17820.0f, -18744.5f, -19668.0f, -20588.0f, -21503.0f,
	-22410.5f, -23308.5f, -24195.0f, -25068.5f, -25926.5f, -26767.0f,
	-27589.0f, -28389.0f, -29166.5f, -29919.0f, -30644.5f, -31342.0f,
	-32009.5f, -32645.0f, -33247.0f, -33814.5f, -34346.0f, -34839.5f,
	-35295.0f, -35710.0f, -36084.5f, -36417.5f, -36707.5f, -36954.0f,
	-37156.5f, -37315.0f, -37428.0f, -37496.0f,  37519.0f,  37496.0f,
	 37428.0f,  37315.0f,  37156.5f,  36954.0f,  36707.5f,  36417.5f,
	 36084.5f,  35710.0f,  35295.0f,  34839.5f,  34346.0f,  33814.5f,
	 33247.0f,  32645.0f,  32009.5f,  31342.0f,  30644.5f,  29919.0f,
	 29166.5f,  28389.0f,  27589.0f,  26767.0f,  25926.5f,  25068.5f,
	 24195.0f,  23308.5f,  22410.5f,  21503.0f,  20588.0f,  19668.0f,
	 18744.5f,  17820.0f,  16895.5f,  15973.5f,  15056.0f,  14144.5f,
	 13241.0f,  12347.0f,  11464.5f,  10594.5f,   9739.0f,   8899.5f,
	  8077.5f,   7274.0f,   6490.0f,   5727.5f,   4987.5f,   4270.0f,
	  3577.0f,   2909.0f,   2266.5f,   1650.0f,   1061.0f,    499.0f,
	   -35.0f,   -541.0f,  -1018.5f,  -1467.5f,  -1888.0f,  -2280.5f,
	 -2644.0f,  -2979.5f,   3287.0f,   3567.0f,   3820.0f,   4046.0f,
	  4246.0f,   4420.0f,   4569.5f,   4694.5f,   4796.0f,   4875.0f,
	  4931.5f,   4967.5f,   4983.0f,   4979.5f,   4958.0f,   4919.0f,
	  4863.5f,   4792.5f,   4708.0f,   4609.5f,   4499.0f,   4377.5f,
	  4245.5f,   4104.5f,   3955.0f,   3798.5f,   3635.5f,   3467.5f,
	  3294.5f,   3118.5f,   2939.5f,   2758.5f,   2576.5f,   2394.0f,
	  2212.5f,   2031.5f,   1852.5f,   1675.5f,   1502.0f,   1331.5f,
	  1165.0f,   1003.0f,    846.0f,    694.0f,    547.5f,    407.0f,
	   272.5f,    144.0f,     22.5f,    -92.5f,   -201.0f,   -302.5f,
	  -397.0f,   -485.0f,   -565.5f,   -640.0f,   -707.0f,   -767.5f,
	  -822.0f,   -869.5f,   -911.0f,   -946.5f,   -976.0f,  -1000.0f,
	  1018.5f,   1031.5f,   1040.0f,   1043.5f,   1042.5f,   1037.5f,
	  1028.5f,   1016.0f,   1000.5f,    981.0f,    959.5f,    935.0f,
	   908.5f,    879.5f,    849.0f,    817.0f,    783.5f,    749.0f,
	   714.0f,    678.0f,    641.5f,    605.0f,    568.5f,    532.0f,
	   495.5f,    459.5f,    424.0f,    389.5f,    355.5f,    322.5f,
	   290.5f,    259.5f,    229.5f,    200.5f,    173.5f,    147.0f,
	   122.0f,     98.5f,     76.5f,     55.5f,     36.0f,     18.0f,
		1.0f,    -14.5f,    -28.5f,    -41.5f,    -53.0f,    -63.5f,
	   -73.0f,    -81.5f,    -88.5f,    -94.5f,   -100.0f,   -104.0f,
	  -107.5f,   -110.5f,   -112.0f,   -113.5f,   -114.0f,   -114.0f,
	  -113.5f,   -112.5f,   -111.0f,   -109.0f,    106.5f,    104.0f,
	   101.0f,     98.0f,     95.0f,     91.5f,     88.0f,     84.5f,
	    80.5f,     77.0f,     73.5f,     69.5f,     66.0f,     62.5f,
	    58.5f,     55.5f,     52.0f,     48.5f,     45.5f,     42.5f,
	    39.5f,     36.5f,     34.0f,     31.5f,     29.0f,     26.5f,
	    24.5f,     22.5f,     20.5f,     19.0f,     17.5f,     15.5f,
	    14.5f,     13.0f,     12.0f,     10.5f,      9.5f,      8.5f,
	     8.0f,      7.0f,      6.5f,      5.5f,      5.0f,      4.5f,
	     4.0f,      3.5f,      3.5f,      3.0f,      2.5f,      2.5f,
	     2.0f,      2.0f,      1.5f,      1.5f,      1.0f,      1.0f,
	     1.0f,      1.0f,      0.5f,      0.5f,      0.5f,      0.5f,
	     0.5f,      0.5f,
	};

	
	private static final float[] D = initD();

	private static final float[] initD() {
		float d[] = new float[1024];
		System.arraycopy(D1, 0, d,   0, 512);
		System.arraycopy(D1, 0, d, 512, 512);
		return d;
	}


	public PolyphaseFilter(float[] output) {
		this.output = output;
	}


	public void filter(float[] samples) {
		float[] out = output;
		float[] d   = D;
		float[] v   = V;

		// Shifting
		VBase = (VBase + 960) % 1024;
		
		// Matrixing
		matrix(samples);
		
		// Build U, windowing, calculate output		
		Arrays.fill(out, 0.0f);

		int Dp = 512 - (VBase >> 1);
		int Vp = (VBase % 128) >> 1;

		while (Vp < 1024) {
			for (int i = 0; i < 32; ++i) {
				out[i] += d[Dp] * v[Vp];
				++Dp;
				++Vp;
			}

			Vp += 128-32;
			Dp += 64-32;
		}

		Vp = (128-32 + 1024) - Vp;
		Dp -= (512 - 32);
		
		while (Vp < 1024) {
			for (int i = 0; i < 32; ++i) {
				out[i] += d[Dp] * v[Vp];
				++Dp;
				++Vp;
			}

			Vp += 128-32;
			Dp += 64-32;
		}
	}


	private void matrix(float[] src) {
		float[] v = V;
		int     b = VBase;

		float t01, t02, t03, t04, t05, t06, t07, t08, t09, t10, t11, t12;
		float t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24;
		float t25, t26, t27, t28, t29, t30, t31, t32, t33;
		
		t01 =  src[ 0] + src[31];
		t02 = (src[ 0] - src[31]) * 0.500602998235f;
		t03 =  src[ 1] + src[30];
		t04 = (src[ 1] - src[30]) * 0.505470959898f;
		t05 =  src[ 2] + src[29];
		t06 = (src[ 2] - src[29]) * 0.515447309923f;
		t07 =  src[ 3] + src[28];
		t08 = (src[ 3] - src[28]) * 0.53104259109f;
		t09 =  src[ 4] + src[27];
		t10 = (src[ 4] - src[27]) * 0.553103896034f;
		t11 =  src[ 5] + src[26];
		t12 = (src[ 5] - src[26]) * 0.582934968206f;
		t13 =  src[ 6] + src[25];
		t14 = (src[ 6] - src[25]) * 0.622504123036f;
		t15 =  src[ 7] + src[24];
		t16 = (src[ 7] - src[24]) * 0.674808341455f;
		t17 =  src[ 8] + src[23];
		t18 = (src[ 8] - src[23]) * 0.744536271002f;
		t19 =  src[ 9] + src[22];
		t20 = (src[ 9] - src[22]) * 0.839349645416f;
		t21 =  src[10] + src[21];
		t22 = (src[10] - src[21]) * 0.972568237862f;
		t23 =  src[11] + src[20];
		t24 = (src[11] - src[20]) * 1.16943993343f;
		t25 =  src[12] + src[19];
		t26 = (src[12] - src[19]) * 1.48416461631f;
		t27 =  src[13] + src[18];
		t28 = (src[13] - src[18]) * 2.05778100995f;
		t29 =  src[14] + src[17];
		t30 = (src[14] - src[17]) * 3.40760841847f;
		t31 =  src[15] + src[16];
		t32 = (src[15] - src[16]) * 10.1900081235f;
		t33 =  t01 + t31;
		t31 = (t01 - t31) * 0.502419286188f;
		t01 =  t03 + t29;
		t29 = (t03 - t29) * 0.52249861494f;
		t03 =  t05 + t27;
		t27 = (t05 - t27) * 0.566944034816f;
		t05 =  t07 + t25;
		t25 = (t07 - t25) * 0.64682178336f;
		t07 =  t09 + t23;
		t23 = (t09 - t23) * 0.788154623451f;
		t09 =  t11 + t21;
		t21 = (t11 - t21) * 1.06067768599f;
		t11 =  t13 + t19;
		t19 = (t13 - t19) * 1.72244709824f;
		t13 =  t15 + t17;
		t17 = (t15 - t17) * 5.10114861869f;
		t15 =  t33 + t13;
		t13 = (t33 - t13) * 0.509795579104f;
		t33 =  t01 + t11;
		t01 = (t01 - t11) * 0.601344886935f;
		t11 =  t03 + t09;
		t09 = (t03 - t09) * 0.899976223136f;
		t03 =  t05 + t07;
		t07 = (t05 - t07) * 2.56291544774f;
		t05 =  t15 + t03;
		t15 = (t15 - t03) * 0.541196100146f;
		t03 =  t33 + t11;
		t11 = (t33 - t11) * 1.30656296488f;
		t33 =  t05 + t03;
		t05 = (t05 - t03) * 0.707106781187f;
		t03 =  t15 + t11;
		t15 = (t15 - t11) * 0.707106781187f;
		t03 += t15;
		t11 =  t13 + t07;
		t13 = (t13 - t07) * 0.541196100146f;
		t07 =  t01 + t09;
		t09 = (t01 - t09) * 1.30656296488f;
		t01 = t11 + t07;
		t07 = (t11 - t07) * 0.707106781187f;
		t11 =  t13 + t09;
		t13 = (t13 - t09) * 0.707106781187f;
		t11 += t13;
		t01 += t11;
		t11 += t07;
		t07 += t13;
		t09 =  t31 + t17;
		t31 = (t31 - t17) * 0.509795579104f;
		t17 =  t29 + t19;
		t29 = (t29 - t19) * 0.601344886935f;
		t19 =  t27 + t21;
		t21 = (t27 - t21) * 0.899976223136f;
		t27 =  t25 + t23;
		t23 = (t25 - t23) * 2.56291544774f;
		t25 =  t09 + t27;
		t09 = (t09 - t27) * 0.541196100146f;
		t27 =  t17 + t19;
		t19 = (t17 - t19) * 1.30656296488f;
		t17 =  t25 + t27;
		t27 = (t25 - t27) * 0.707106781187f;
		t25 =  t09 + t19;
		t19 = (t09 - t19) * 0.707106781187f;
		t25 += t19;
		t09 =  t31 + t23;
		t31 = (t31 - t23) * 0.541196100146f;
		t23 =  t29 + t21;
		t21 = (t29 - t21) * 1.30656296488f;
		t29 =  t09 + t23;
		t23 = (t09 - t23) * 0.707106781187f;
		t09 =  t31 + t21;
		t31 = (t31 - t21) * 0.707106781187f;
		t09 += t31;
		t29 += t09;
		t09 += t23;
		t23 += t31;
		t17 += t29;
		t29 += t25;
		t25 += t09;
		t09 += t27;
		t27 += t23;
		t23 += t19;
		t19 += t31;
		t21 =  t02 + t32;
		t02 = (t02 - t32) * 0.502419286188f;
		t32 =  t04 + t30;
		t04 = (t04 - t30) * 0.52249861494f;
		t30 =  t06 + t28;
		t28 = (t06 - t28) * 0.566944034816f;
		t06 =  t08 + t26;
		t08 = (t08 - t26) * 0.64682178336f;
		t26 =  t10 + t24;
		t10 = (t10 - t24) * 0.788154623451f;
		t24 =  t12 + t22;
		t22 = (t12 - t22) * 1.06067768599f;
		t12 =  t14 + t20;
		t20 = (t14 - t20) * 1.72244709824f;
		t14 =  t16 + t18;
		t16 = (t16 - t18) * 5.10114861869f;
		t18 =  t21 + t14;
		t14 = (t21 - t14) * 0.509795579104f;
		t21 =  t32 + t12;
		t32 = (t32 - t12) * 0.601344886935f;
		t12 =  t30 + t24;
		t24 = (t30 - t24) * 0.899976223136f;
		t30 =  t06 + t26;
		t26 = (t06 - t26) * 2.56291544774f;
		t06 =  t18 + t30;
		t18 = (t18 - t30) * 0.541196100146f;
		t30 =  t21 + t12;
		t12 = (t21 - t12) * 1.30656296488f;
		t21 =  t06 + t30;
		t30 = (t06 - t30) * 0.707106781187f;
		t06 =  t18 + t12;
		t12 = (t18 - t12) * 0.707106781187f;
		t06 += t12;
		t18 =  t14 + t26;
		t26 = (t14 - t26) * 0.541196100146f;
		t14 =  t32 + t24;
		t24 = (t32 - t24) * 1.30656296488f;
		t32 =  t18 + t14;
		t14 = (t18 - t14) * 0.707106781187f;
		t18 =  t26 + t24;
		t24 = (t26 - t24) * 0.707106781187f;
		t18 += t24;
		t32 += t18;
		t18 += t14;
		t26 =  t14 + t24;
		t14 =  t02 + t16;
		t02 = (t02 - t16) * 0.509795579104f;
		t16 =  t04 + t20;
		t04 = (t04 - t20) * 0.601344886935f;
		t20 =  t28 + t22;
		t22 = (t28 - t22) * 0.899976223136f;
		t28 =  t08 + t10;
		t10 = (t08 - t10) * 2.56291544774f;
		t08 =  t14 + t28;
		t14 = (t14 - t28) * 0.541196100146f;
		t28 =  t16 + t20;
		t20 = (t16 - t20) * 1.30656296488f;
		t16 =  t08 + t28;
		t28 = (t08 - t28) * 0.707106781187f;
		t08 =  t14 + t20;
		t20 = (t14 - t20) * 0.707106781187f;
		t08 += t20;
		t14 =  t02 + t10;
		t02 = (t02 - t10) * 0.541196100146f;
		t10 =  t04 + t22;
		t22 = (t04 - t22) * 1.30656296488f;
		t04 =  t14 + t10;
		t10 = (t14 - t10) * 0.707106781187f;
		t14 =  t02 + t22;
		t02 = (t02 - t22) * 0.707106781187f;
		t14 += t02;
		t04 += t14;
		t14 += t10;
		t10 += t02;
		t16 += t04;
		t04 += t08;
		t08 += t14;
		t14 += t28;
		t28 += t10;
		t10 += t20;
		t20 += t02;
		t21 += t16;
		t16 += t32;
		t32 += t04;
		t04 += t06;
		t06 += t08;
		t08 += t18;
		t18 += t14;
		t14 += t30;
		t30 += t28;
		t28 += t26;
		t26 += t10;
		t10 += t12;
		t12 += t20;
		t20 += t24;
		t24 += t02;
		v[b + 48] = -t33;
		v[b + 49] = v[b + 47] = -t21;
		v[b + 50] = v[b + 46] = -t17;
		v[b + 51] = v[b + 45] = -t16;
		v[b + 52] = v[b + 44] = -t01;
		v[b + 53] = v[b + 43] = -t32;
		v[b + 54] = v[b + 42] = -t29;
		v[b + 55] = v[b + 41] = -t04;
		v[b + 56] = v[b + 40] = -t03;
		v[b + 57] = v[b + 39] = -t06;
		v[b + 58] = v[b + 38] = -t25;
		v[b + 59] = v[b + 37] = -t08;
		v[b + 60] = v[b + 36] = -t11;
		v[b + 61] = v[b + 35] = -t18;
		v[b + 62] = v[b + 34] = -t09;
		v[b + 63] = v[b + 33] = -t14;
		v[b + 32] = -t05;
		v[b +  0] =  t05;
		v[b + 31] = -t30;
		v[b +  1] =  t30;
		v[b + 30] = -t27;
		v[b +  2] =  t27;
		v[b + 29] = -t28;
		v[b +  3] =  t28;
		v[b + 28] = -t07;
		v[b +  4] =  t07;
		v[b + 27] = -t26;
		v[b +  5] =  t26;
		v[b + 26] = -t23;
		v[b +  6] =  t23;
		v[b + 25] = -t10;
		v[b +  7] =  t10;
		v[b + 24] = -t15;
		v[b +  8] =  t15;
		v[b + 23] = -t12;
		v[b +  9] =  t12;
		v[b + 22] = -t19;
		v[b + 10] =  t19;
		v[b + 21] = -t20;
		v[b + 11] =  t20;
		v[b + 20] = -t13;
		v[b + 12] =  t13;
		v[b + 19] = -t24;
		v[b + 13] =  t24;
		v[b + 18] = -t31;
		v[b + 14] =  t31;
		v[b + 17] = -t02;
		v[b + 15] =  t02;
		v[b + 16] =  0.0f; // :)
	}
	
}
