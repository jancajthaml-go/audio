package format.mp3;
import java.util.Arrays;


public class HybridFilter {
	
	private final float[]   prev = new float[18];
	private final float[][] output;
	
	private final int subband;
	private final int first;
	private final int invStart;
	
	
	private static final float[][] windows = {
		{   // Normal (Type 0)
			0.0436193873653360f,  0.1305261922200516f,
			0.2164396139381029f,  0.3007057995042731f,
			0.3826834323650898f,  0.4617486132350339f,
			0.5372996083468239f,  0.6087614290087207f,
			0.6755902076156601f,  0.7372773368101240f,
			0.7933533402912352f,  0.8433914458128857f,
			0.8870108331782216f,  0.9238795325112867f,
			0.9537169507482268f,  0.9762960071199334f,
			0.9914448613738104f,  0.9990482215818578f,
			0.9990482215818578f,  0.9914448613738104f,
			0.9762960071199334f,  0.9537169507482269f,
			0.9238795325112867f,  0.8870108331782218f,
			0.8433914458128858f,  0.7933533402912352f,
			0.7372773368101241f,  0.6755902076156604f,
			0.6087614290087209f,  0.5372996083468241f,
			0.4617486132350339f,  0.3826834323650899f,
			0.3007057995042733f,  0.2164396139381032f,
			0.1305261922200516f,  0.0436193873653361f,
		},
		
		{   // Start (Type 1)
			0.043619387365336f,  0.130526192220052f,
			0.216439613938103f,  0.300705799504273f,
			0.382683432365090f,  0.461748613235034f,
			0.537299608346824f,  0.608761429008721f,
			0.675590207615660f,  0.737277336810124f,
			0.793353340291235f,  0.843391445812886f,
			0.887010833178222f,  0.923879532511287f,
			0.953716950748227f,  0.976296007119933f,
			0.991444861373810f,  0.999048221581858f,
			1.000000000000000f,  1.000000000000000f,
			1.000000000000000f,  1.000000000000000f,
			1.000000000000000f,  1.000000000000000f,
			0.991444861373810f,  0.923879532511287f,
			0.793353340291235f,  0.608761429008721f,
			0.382683432365090f,  0.130526192220052f,
			0.000000000000000f,  0.000000000000000f,
			0.000000000000000f,  0.000000000000000f,
			0.000000000000000f,  0.000000000000000f,			
		},
		
		// Type 2 blocks are windowed in shortBlock()
		{
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		},
		
		{   // Stop (Type 3)
			0.000000000000000f,  0.000000000000000f,
			0.000000000000000f,  0.000000000000000f,
			0.000000000000000f,  0.000000000000000f,
			0.130526192220052f,  0.382683432365090f,
			0.608761429008721f,  0.793353340291235f,
			0.923879532511287f,  0.991444861373810f,
			1.000000000000000f,  1.000000000000000f,
			1.000000000000000f,  1.000000000000000f,
			1.000000000000000f,  1.000000000000000f,
			0.999048221581858f,  0.991444861373810f,
			0.976296007119933f,  0.953716950748227f,
			0.923879532511287f,  0.887010833178222f,
			0.843391445812886f,  0.793353340291235f,
			0.737277336810124f,  0.675590207615660f,
			0.608761429008721f,  0.537299608346824f,
			0.461748613235034f,  0.382683432365090f,
			0.300705799504273f,  0.216439613938103f,
			0.130526192220052f,  0.043619387365336f,
		},
	};
	
	
	public HybridFilter(float[][] output, int subband) {
		this.output   = output;
		this.subband  = subband;
		this.first    = 18*subband;
		this.invStart = ((subband & 1) == 1 ? 1 : 18);
	}

	
	public void transform(float[] input, int type, int gr) {
		int       sb       = subband;
		float[][] out      = output;
		float[]   pr       = prev;

		// IMDCT + windowing
		if (type == 2) {
			shortBlock(input);
		}
		else {
			longBlock(input, type);
		}
		
		
		int grOffset = (gr == 0 ? 0 : 18);
		
		// Overlap add
		float[] yy = y;

		for (int i = 0; i < 18; ++i) {
			out[i + grOffset][sb] = pr[i] + yy[i];
		}
		System.arraycopy(yy, 18, pr, 0, 18);

		
		// Compensation for frequency inversion
		for (int i = invStart; i < 18; i += 2) {
			out[i + grOffset][sb] = -out[i + grOffset][sb];
		}
	}
	
	
	public void zeros(int gr) {
		int       grOffset = (gr == 0 ? 0 : 18);
		int       sb       = subband;
		float[][] out      = output;
		float[]   pr       = prev;

		// Overlap add
		for (int i = 0; i < 18; ++i) {
			out[i + grOffset][sb] = pr[i];
		}
		
		Arrays.fill(pr, 0.0f);
		
		// Compensation for frequency inversion
		for (int i = invStart; i < 18; i += 2) {
			out[i + grOffset][sb] = -out[i + grOffset][sb];
		}
	}
	
	
	private final float[] y = new float[36];
	
	private void shortBlock(float x[]) {
		float[] yy = y;

		float tmp0, tmp1;
		float a0, a2, b0, b2, c0, c2;
		
		Arrays.fill(yy, 0.0f);
		
		for (int w = 0; w < 3; ++w) {
			int j = 6*(w+1);
			int i = first + w;
			
			tmp0 = x[i+0*3]-x[i+3*3]-x[i+4*3];
			tmp1 = x[i+1*3]-x[i+2*3]-x[i+5*3];
			
			a0 =  0.382683432365090f*tmp0 - 0.923879532511287f*tmp1;
			a2 = -0.923879532511287f*tmp0 - 0.382683432365090f*tmp1;
			
			tmp0 = (2*x[i+0*3]+x[i+3*3]+x[i+4*3])*0.965925826289068f
				+ 0.448287736084027f*(x[i+4*3]-x[i+3*3]);

			tmp1 = (2*x[i+1*3]+x[i+2*3]+x[i+5*3])*0.707106781186548f
				+ 1.224744871391590f*(x[i+5*3]-x[i+2*3]);
			
			b0 =  0.191341716182545f*tmp0 - 0.461939766255643f*tmp1;
			b2 = -0.461939766255643f*tmp0 - 0.191341716182545f*tmp1;
			
			tmp0 = 1.67303260747562f*(x[i+1*3]+x[i+2*3])
				- (x[i+1*3]-x[i+2*3]+2*x[i+5*3])*0.258819045102521f;

			tmp1 = 1.22474487139159f*(x[i+0*3]+x[i+3*3])
				- (x[i+0*3]-x[i+3*3]+2*x[i+4*3])*0.707106781186548f;
			
			c0 =  0.191341716182545f*tmp0 - 0.461939766255643f*tmp1;
			c2 = -0.461939766255643f*tmp0 - 0.191341716182545f*tmp1;
			
			tmp0 = b0 - c0;
			tmp1 = b0 + c0;
			
			yy[j +  0]  += tmp0 *  0.130526192220052;
			yy[j +  1]  += a0   *  0.382683432365090;
			yy[j +  2]  += tmp1 *  0.608761429008721;
			yy[j +  3]  += tmp1 * -0.793353340291235;
			yy[j +  4]  += a0   * -0.923879532511287;
			yy[j +  5]  += tmp0 * -0.991444861373810;
			
			tmp0 = b2 - c2;
			tmp1 = b2 + c2;
			
			yy[j +  6] += tmp0 *  0.991444861373810;
			yy[j +  7] += a2   *  0.923879532511287;
			yy[j +  8] += tmp1 *  0.793353340291235;
			yy[j +  9] += tmp1 *  0.608761429008721;
			yy[j + 10] += a2   *  0.382683432365090;
			yy[j + 11] += tmp0 *  0.130526192220052;
		}
	
	}
	
	
	private void longBlock(float x[], int type)  {
		float[] yy = y;
		int     ff = first;

		float tmp0, tmp1, tmp2, tmp3, tmp4, tmp5;
		float _tmp0, _tmp1;
		float a2, b0, b2, b6, b8, c0, c2, c6, c8;
		float a_a0, a_a2, a_b0, a_b2, a_c0, a_c2;
		float b_a0, b_a2, b_b0, b_b2, b_c0, b_c2;
		float c_a0, c_a2, c_b0, c_b2, c_c0, c_c2;
		
		tmp0 = x[ff +  0] - x[ff + 11] - x[ff + 12];
		tmp1 = x[ff +  1] - x[ff + 10] - x[ff + 13];
		tmp2 = x[ff +  2] - x[ff +  9] - x[ff + 14];
		tmp3 = x[ff +  3] - x[ff +  8] - x[ff + 15];
		tmp4 = x[ff +  4] - x[ff +  7] - x[ff + 16];
		tmp5 = x[ff +  5] - x[ff +  6] - x[ff + 17];
		
		_tmp0 = tmp0 - tmp3 - tmp4;
		_tmp1 = tmp1 - tmp2 - tmp5;
		
		a_a0 =  0.382683432365090f*_tmp0 - 0.923879532511287f*_tmp1;
		a_a2 = -0.923879532511287f*_tmp0 - 0.382683432365090f*_tmp1;
		
		_tmp0 = (2*tmp0 + tmp3 + tmp4)*0.965925826289068f
			+ 0.448287736084027f*(tmp4 - tmp3);

		_tmp1 = (2*tmp1 + tmp2 + tmp5)*0.707106781186548f
			+ 1.224744871391590f*(tmp5 - tmp2);
		
		a_b0 =  0.191341716182545f*_tmp0 - 0.461939766255643f*_tmp1;
		a_b2 = -0.461939766255643f*_tmp0 - 0.191341716182545f*_tmp1;
		
		_tmp0 = 1.67303260747562f*(tmp1 + tmp2)
			- (tmp1 - tmp2 + 2*tmp5)*0.258819045102521f;

		_tmp1 = 1.22474487139159f*(tmp0 + tmp3)
			- (tmp0 - tmp3 + 2*tmp4)*0.707106781186548f;
		
		a_c0 =  0.191341716182545f*_tmp0 - 0.461939766255643f*_tmp1;
		a_c2 = -0.461939766255643f*_tmp0 - 0.191341716182545f*_tmp1;
		
		a2 = a_b0 + a_c0;
		
		tmp0 = (2*x[ff + 0] + x[ff + 11] + x[ff+12])*0.498097349045873f
			+ 0.0754790873051733f*(x[ff + 12] - x[ff + 11]);

		tmp1 = (2*x[ff + 1] + x[ff + 10] + x[ff+13])*0.482962913144534f
			+ 0.2241438680420130f*(x[ff + 13] - x[ff + 10]);

		tmp2 = (2*x[ff + 2] + x[ff +  9] + x[ff+14])*0.453153893518325f
			+ 0.3659981507706670f*(x[ff + 14] - x[ff +  9]);

		tmp3 = (2*x[ff + 3] + x[ff +  8] + x[ff+15])*0.409576022144496f
			+ 0.4967317648921540f*(x[ff + 15] - x[ff +  8]);

		tmp4 = (2*x[ff + 4] + x[ff +  7] + x[ff+16])*0.353553390593274f
			+ 0.6123724356957940f*(x[ff + 16] - x[ff +  7]);
		
		tmp5 = (2*x[ff + 5] + x[ff +  6] + x[ff+17])*0.286788218175523f
			+ 0.7094064799162220f*(x[ff + 17] - x[ff +  6]);
		
		_tmp0 = tmp0 - tmp3 - tmp4;
		_tmp1 = tmp1 - tmp2 - tmp5;
		
		b_a0 =  0.382683432365090f*_tmp0 - 0.923879532511287f*_tmp1;
		b_a2 = -0.923879532511287f*_tmp0 - 0.382683432365090f*_tmp1;
		
		_tmp0 = (2*tmp0 + tmp3 + tmp4)*0.965925826289068f
			+ 0.448287736084027f*(tmp4 - tmp3);

		_tmp1 = (2*tmp1 + tmp2 + tmp5)*0.707106781186548f
			+ 1.224744871391590f*(tmp5 - tmp2);
		
		b_b0 =   0.191341716182545f*_tmp0 + -0.461939766255643f*_tmp1;
		b_b2 =  -0.461939766255643f*_tmp0 - 0.191341716182545f*_tmp1;
		
		_tmp0 = 1.67303260747562f*(tmp1 + tmp2)
			- (tmp1 - tmp2 + 2*tmp5)*0.258819045102521f;

		_tmp1 = 1.22474487139159f*(tmp0 + tmp3)
			- (tmp0 - tmp3 + 2*tmp4)*0.707106781186548f;
		
		b_c0 =  0.191341716182545f*_tmp0 - 0.461939766255643f*_tmp1;
		b_c2 =  -0.461939766255643f*_tmp0 - 0.191341716182545f*_tmp1;
		
		b0 = b_b0 - b_c0;
		b2 = b_b0 + b_c0;
		b6 = b_b2 - b_c2;
		b8 = b_b2 + b_c2;
		
		tmp0 = 0.862729915662821f*(x[ff + 5] + x[ff+ 6])
			- 0.0435778713738291f*(x[ff + 5] - x[ff+ 6] + 2*x[ff + 17]);

		tmp1 = 0.836516303737808f*(x[ff + 4] + x[ff+ 7])
			- 0.1294095225512600f*(x[ff + 4] - x[ff+ 7] + 2*x[ff + 16]);

		tmp2 = 0.784885567221396f*(x[ff + 3] + x[ff+ 8])
			- 0.2113091308703500f*(x[ff + 3] - x[ff+ 8] + 2*x[ff + 15]);

		tmp3 = 0.709406479916222f*(x[ff + 2] + x[ff+ 9])
			- 0.2867882181755230f*(x[ff + 2] - x[ff+ 9] + 2*x[ff + 14]);

		tmp4 = 0.612372435695795f*(x[ff + 1] + x[ff+10])
			- 0.3535533905932740f*(x[ff + 1] - x[ff+10] + 2*x[ff + 13]);

		tmp5 = 0.496731764892154f*(x[ff + 0] + x[ff+11])
			- 0.4095760221444960f*(x[ff + 0] - x[ff+11] + 2*x[ff + 12]);
		
		_tmp0 = tmp0 - tmp3 - tmp4;
		_tmp1 = tmp1 - tmp2 - tmp5;
		
		c_a0 = 0.3826834323650900f*_tmp0 - 0.923879532511287f*_tmp1;
		c_a2 = -0.923879532511287f*_tmp0 - 0.382683432365090f*_tmp1;
		
		_tmp0 = 0.448287736084027f*(tmp3 - tmp4)
			- (2*tmp0 + tmp3 + tmp4)*0.965925826289068f;

		_tmp1 = 1.224744871391590f*(tmp2 - tmp5)
			- (2*tmp1 + tmp2 + tmp5)*0.707106781186548f;
		
		c_b0 =   0.191341716182545f*_tmp0 - 0.461939766255643f*_tmp1;
		c_b2 =  -0.461939766255643f*_tmp0 - 0.191341716182545f*_tmp1;
		
		_tmp0 = (tmp1 - tmp2 + 2*tmp5)*0.258819045102521f
			- 1.67303260747562f*(tmp1 + tmp2);

		_tmp1 = (tmp0 - tmp3 + 2*tmp4)*0.707106781186548f
			- 1.22474487139159f*(tmp0 + tmp3);
		
		c_c0 =  0.191341716182545f*_tmp0 - 0.461939766255643f*_tmp1;
		c_c2 = -0.461939766255643f*_tmp0 - 0.191341716182545f*_tmp1;
		
		c0 = c_b0 - c_c0;
		c2 = c_b0 + c_c0;
		c6 = c_b2 - c_c2;
		c8 = c_b2 + c_c2;
		
		yy[15] =  c0 - b0;
		yy[ 2] = -yy[15];
		yy[ 0] =  c0 + b0;
		yy[17] = -yy[ 0];
		yy[ 1] =  a_b0 - a_c0;
		yy[16] = -yy[ 1];
		yy[12] =  c_a0 - b_a0;
		yy[ 5] = -yy[12];
		yy[ 3] =  c_a0 + b_a0;
		yy[14] = -yy[ 3];
		yy[ 4] =  a_a0;
		yy[13] = -a_a0;
		yy[ 9] =  c2 - b2;
		yy[ 8] = -yy[ 9];
		yy[ 6] =  c2 + b2;
		yy[11] = -yy[ 6];
		yy[ 7] =  a2;
		yy[10] = -a2;
		
		yy[33] =  yy[20] = b6 - c6;
		yy[18] =  yy[35] = b6 + c6;
		yy[19] =  yy[34] = a_b2 - a_c2;
		yy[25] =  yy[28] = a_b2 + a_c2;
		yy[30] =  yy[23] = b_a2 - c_a2;
		yy[21] =  yy[32] = b_a2 + c_a2;
		yy[22] =  yy[31] = a_a2;
		yy[27] =  yy[26] = b8 - c8;
		yy[24] =  yy[29] = b8 + c8;

		float[] window = windows[type];
		
		for (int i = 0; i < 36; ++i) {
			yy[i] *= window[i];
		}		
	}
	
}
